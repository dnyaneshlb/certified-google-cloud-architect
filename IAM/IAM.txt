links :
	https://youtu.be/etxbSda_ZAU   -------- VEry useful video. Must Watch.
	https://youtu.be/K3TM7L6de2o   -------- VEry useful video. Must Watch.
		
	https://youtu.be/vaylQUuIANk -------- Very resourceful information.	
	https://cloud.google.com/iam/docs/using-iam-securely ------ Awesome Dos and Donts
	
	Best Practices : 
		https://www.youtube.com/watch?v=tNG4RUpBUso


	ACE**
	https://cloud.google.com/iam/docs/using-iam-securely
	https://cloud.google.com/blog/products/identity-security/iam-best-practice-guides-available-now

Service Accounts dont have passwords hence can't be used for browser-based sign-in.

IAM lets you grant granular access to specific Google Cloud resources and helps prevent access to other resources. IAM lets you adopt the security principle of least privilege, which states that nobody should have more permissions than they actually need.
	---> WHO has WHAT access on WHICH resource


Policy :
	A policy is a collection of bindings that associate a member with a role. A binding specifies how access should be granted on resources.
	You can set an IAM policy at any level in the resource hierarchy: 
		the organization level, 
		the folder level, 
		the project level, 
		the resource level.
	This policy inheritance is transitive; in other words, resources inherit policies from the project, which inherit policies from folders, which inherit policies from the organization. Therefore, the organization-level policies also apply at the resource level.	
	--> you cannot assign narrower access as we gon down the resource hierarchy.
		i.e. If A user having a editor role at org level. You cannot set him viewer(which is more narrower than editor) at your resource level.
	etag :
		When you have multiple systems trying to write to the same Cloud IAM policy at the same time, there is a risk that those systems might overwrite each other's changes.
		To avoid such scenarios, Cloud IAM supports concurrency control through the use of an etag field in the policy. Whenever you retrieve a policy, be sure that you use the etag from the retrieved policy when you submit your modified policy. If the policy has been modified since you retrieved it, the etag will not match and your update will fail.
		
	version :
		This field describes which policy schema version is being used for creating policy. This is specifically added since policy schema (XSD) is contineously evolving. 
		
	Conditional Policy :
		You can create policy that expires and starts at some time.
		
	Binding :
		Each policy can contain one or more binding.
		e.g. Same policy can bind multiple members, dnyanesh@gmail.com a editor access at project level as well as dnyanesh4friends@gmail.com as viewer access.
		Each policy can have max 1500 member bindings.

	Commands :
		gcloud projects set-iam-policy project-id policy.json
		gcloud projects get-iam-policy project-id --format=json > policy.json
			see @policy.json
	Best Practices :
		When managing multiple user accounts with the same access configurations, use Google groups instead of individual user account.
		Carefully consider which members are granted access permissions at the organization level.	
		Specify policy version while sending a getIamPolicy() or setIamPolicy() request.
		
Role:
	A role is a collection of permissions. 
	Permissions determine what operations are allowed on a resource. When you grant a role to a member, you grant all the permissions that the role contains.
	compute.admin role may have many permissions like
			compute.list, compute.viewer, compute.instance,creator and so on.


Member :
	A member is Some google known identity
	It can be 
		USER : gmail account, gsuite acount, or any email account validated with google.
		SERVICE ACCOUNT :  account for App/Service.
		GROUP : 
			Group of user and group of service accounts.
			Each group has unique email address. developers.mindsphere@azure.com
			Its best practice to use group for everything
			You can nest groups as well. e.g. mindspehere developers group and iot subgroup of it and "ie engineer" as sub group and so on
		Google Workspace domain : Domain managed by gsuite
		Cloud Identity domain : Domain managed by cloud Identity. Google recongised domain like ikea.com
		
		
		allAuthenticatedUsers : any authenticated google account or service account
								essentially authenticated public access
		allUsers : anyone who is on the internet. Public anonymous access is possible.
	


USer ----> User Accounts ----> Roles ----> Permissions ----> Resources
Read above like below,
User has different accounts. Each account has roles. Each role has permissions related to resources. 
e.g. I have gmail account and a service acount. My service account has owner access role. owner has permissions to create, delete and view and edit resource like compute engine, pubsub topic etc.

 
See iam Heirarchy.png
See iam Heirarchy Example.png
	in example above, you can see that bob has organization level network admin access so he can perform tasks related to network admin permissions across all projects within that organization.
	But Alice has compute instance admin access to only project2 resources. So she can only access resources under project 2 with instance admin role. She cannot insert new network in project 1 as well as project 2. 
	
	
Roles in GCP :
	A role is a collection of permissions. You cannot grant a permission to the user directly. Instead, you grant them a role. When you grant a role to a user, you grant them all the permissions that the role contains.
	Primitive/Basic Roles : 
			Owner
			Editor : viewer + changing state of existing resources
			Viewer
			Browser : Most restrictive than viewer. Can just list projects and folders
					  gcloud iam roles describe roles/browser
		Avoid using these roles if possible, because they include a wide range of permissions across all Google Cloud services. Use them only in case of small team or if gcp dont have predefined role you want(99/99% cases gcp has it).
	Predefined Roles :
		Fine grained access, 480 google provided roles like Project Administrator, Bigtable Reader, Storage Admin, Storage Object Creator etc. 
	Custom Roles
		Roles you have created by inheriting predefined roles or creating completely new role.
	

Roles syntax:
	Iam role has a specfic syntax.
	Basic : roles/$rolename
					roles/owner, roles/viewer, roles/editor
	Predefined : roles/$section.$granularRole
					roles/compute.storageAdmin, roles/compute.networkAdmin
					roles/storage.objectCreator, roles/iam.roleViewer (role that view other roles)
	
	Legacy	   : roles/storage.legacyObjectReader, roles/storage.legacyBucketOwner
					

	Note the syntax for permission --- compute.instance.create, compute.instance.list, compute.instance.ssh

	
Member Accounts in GCP :
Google Account : any google domain account like gmail
Service Account : An account by using which services can communicate with each other without human intervention.
					e.g. compute machine from project1 wants to access storage bucket1 from project2 then it happen via service account.
					Max 100 service accounts per project can be created.
Google Group Account
	A bundle of google accounts and service accounts so that we can group similar people together.
	e.g. Developers can be added in "Dev Contributors" google group and we can apply policy to group rather than managing each and every user individually.
GSuite Account : Account used for user having Gsuite products puschased.(Gsuite is suite of google products like gmail, gdocs, storage, etc bundled together as single entity)	
Cloud Identity Domain Account : google hosted domain. ikea.com is a google recognised domain hence users in this domain are valid gcp members.

Remember that a policy set on a child resource cannot restrict access granted on its parent. 


Hierarchy :
	Organization
		Folder
			Folder(Folders can have folders)
				Project
					Resource
					...
					
	e.g.
	Mobiliya
		Dev
			Ikea
				Compute Engine
					Instance1
						read, write, edit
					Instance2
						read
		Ops	
			Dashboard
				Gke
					edit service, scale deployment
					
					
	You can set a Cloud IAM policy at any level in the resource hierarchy: the organization level, the folder level, the project level, or the resource level. Resources inherit the policies of the parent resource. If you set a policy at the organization level, it is automatically inherited by all its children projects, and if you set a policy at the project level, it's inherited by all its child resources. 
	"Child policies cannot restrict access granted at a higher level". 
	For example, if you grant the Editor role to a user for a project, and grant the Viewer role to the same user for a child resource, then the user still has the Editor role grant for the child resource.
	
	
Custom Roles :
	If preddefined roles dont suffice your needs then you need to create a custom one with unique name, non confusing title and description.
	If you no longer wish for people in the your organization to use the role, change its role.stage property to DEPRECATED, and optionally set the deprecation_message to let users know what alternative roles should be used or where to get more information. 
	Role launch stage can be alpha, beta, GA, Deprecated, Disabled, EAP
	
	-->Custom roles cannot be applied at folder level. Only org or project level.
		gcloud iam roles create atp_tester --organization=ik.com OR --project=dsa-dev
	

Conditional Roles Acess
	In GCP you can provide users the access to certain roles based on conditions
		e.g. Give project monitoring access to user from friday evening to Sunday monrning.
			 Give cloud run editor role to dnyanesh, for cloud run instances where name is dsa-svc  
			 Give netwoek admin role to specific SA for VPC having certain network tag.
			 Give user cloud function deployer role till 10 Dec 2021
	Best part is you can combine any number of such conditions while assigning a role.		 
	see @conditional roles.png		 


Granting access (VVVIMP for ACE exam)
	https://cloud.google.com/sdk/gcloud/reference/projects/add-iam-policy-binding
	gcloud compute instances add-iam-policy-binding redis-forwarder 
		--member=user:dnyaneshwar@ikea.com  
		--role=roles/compute.instanceAdmin 

	gcloud projects add-iam-policy-binding dsa-dev
		--member=user:dnyaneshwar@ikea.com
		--roles=roles/editor
		
	gcloud pubsub add-iam-policy-binding samplepubsub
		--member=group:dsa-group@ikea.com
		--roles=roles/pubsub.admin

Revoking access(VVVIMP for ACE exam)
	syntax ----> gcloud group remove-iam-policy-binding resource --member=member --role=role-id
	
	gcloud projects remove-iam-policy-binding dsa-project 
		--member=group:dsa-group@ikea.com 
		--roles=roles/editor

	Note : 
		To provide project owner access to a user outside your organization, you cannot use gcloud. You must use cloud console.
	
	
What are service accounts?
	https://www.youtube.com/playlist?list=PLIivdWyY5sqIlPnZ7cvkg2Ck-8ZZ8TA5t
	A service account is an identity that an instance or an application can use to run API requests on your behalf.
	A service account is a special kind of account used by an application or a virtual machine (VM) instance, not a person. Applications use service accounts to make authorized API calls.
	
	For example, a Compute Engine VM may run as a service account, and that account can be given permissions to access the resources it needs. This way the service account is the identity of the service, and the service account's permissions control which resources the service can access.
	A service account is identified by its email address, which is unique to the account.
	Service accounts do not have passwords, and cannot log in via browsers or cookies.
	
	When a service account is attached to a resource, Default Application Credentials library picks it automatically without any config you our end and make authentication/authorization for API calls.
	
	Service Account Key :
		Google Managed :
			Both public and private keys are managed/rotated by google with world class security.
		USer Managed
			Google only manages public key. Private key is managed outside google cloud.
			Best practice is to create less number of user managed keys so user is able to rotate them time to time.
	You can create up to 100 service accounts per project 
	In addition to your custom service account, google also creates some service accounts in your project to manage your project with google resources. This account should not be edited or deleted. These are not listed in the Service Accounts section of the Cloud Console
	
	Short Lived Service Account?
		temporarily delegate access to Google Cloud resources across different projects, organizations, or accounts. For example, instead of providing an external caller with the permanent credentials of a highly-privileged service account, temporary emergency access can be granted instead
	Best Practices:
		Create single purpose service accounts. Its okay if you have many single purpose SAs.
		Disable SA before deleting it.
		
	

Types of Service Accounts
	User-managed
		User created custom SA
			created by user for its own purpose.
		Compute Engine default service account
			default SA provided to compute engine.
			It has editor role on project. It is recommended to remove unwanted permissions from default SA.
			project_number-compute@developers.gserviceaccount.com
		App Engine Default Service account
			YOUR_PROJECT_ID@appspot.gserviceaccount.com
			has Editor role in the project
			created when you create first app enging app.
		
	Google-managed
		Google APIs service Agent
			USed to run internal GCP processes on your behalf
			PROJECT_NUMBER@cloudservices.gserviceaccount.com

		Compute Engine Service Agent
			designed specifically for Compute Engine to perform its service duties on your project
			e.g. live migrating vm instance, schedeuled backup etc. 
		
		App Engine Flexible Environment Service Agent
		App Engine Standard Environment Service Agent
		.
		.
		.
		so on
		these SA/service agents are added when corresponding APIs are enabled 
		
		
Best practices
	Mirror your Cloud IAM policy hierarchy structure to your organization structure. The Cloud IAM policy hierarchy should reflect how your company is organized, whether it's a startup, a SME, or a large corporation. A startup may start out with a flat policy hierarchy with no organization resource. When more people start collaborating on projects and the number of projects increase, getting an organization resource might make sense. An organization resource is recommended for larger companies with multiple departments and teams where each team is responsible for their own set of applications and services.

	Use projects to group resources that share the same trust boundary. For example, resources for the same product or microservice can belong to the same project.

	Set policies at the organization level and at the project level rather than at the resource level. As new resources are added, you may want them to automatically inherit policies from their parent resource. For example, as new virtual machines are added to the project through auto-scaling, they automatically inherit the policy on the project.

	Use the security principle of least privilege to grant Cloud IAM roles; that is, only give the least amount of access necessary to your resources.
	Grant roles at the smallest scope needed. For example, if a user only needs access to publish messages to a Pub/Sub topic, grant the Publisher role to the user for that topic.

	Grant roles to a Google group instead of to individual users when possible. It is easier to manage members in a Google group than to update a Cloud IAM policy.
	Control the ownership of the Google group used in Cloud IAM policies.

	Remember that a policy set on a child resource cannot restrict access granted on its parent. Check the policy granted on every resource and understand the hierarchical inheritance.

	If you need to grant a role to a user or group that spans across multiple projects, set that role at the folder level instead of setting it at the project level.

	Use labels to annotate, group, and filter resources.

	Audit your policies to ensure compliance. Audit logs contain all setIamPolicy() calls, so you can trace when a policy has been created or modified.

	Audit the ownership and the membership of the Google groups used in policies.

	If you want to limit project creation in your organization, change the organization access policy to grant the Project Creator role to a group that you manage.
	
	Be very very careful when granting "ServiceAccountUSer" role to an entity because it will allow access to all the resources service account has access to.


FAQ :
Can I use Google groups with Cloud IAM?
	Usually. One exception is the owner role. A group can be assigned the owner role for a project only if they are both part of the same organization. Projects without an organization cannot have groups as owners, nor can groups be assigned as owners for projects in different organizations.
	In my case, ace-certifed project cannot have a google group as owner because this project dont have orgnization.

Can I use Cloud IAM to create and manage my users?
	No. You can use Cloud Identity or G Suite to create and manage users. You can also manage your users by your current methods such as LDAP or Google Groups. If you use LDAP to manage your users, you'll need to use Google Cloud Directory Sync to synchronize the data in your Google domain. However you manage your users, you'll need to bind them, preferably using Google Groups, to a role in an IAM policy to allow them to access resources.

How do I grant permissions to resources in my project to someone who is not a member of my organization?
	Using Google groups, you can add a user outside of your organization to a group and bind that group to the role. Note that Google groups don't have login credentials, and you cannot use Google groups to establish identity to make a request to access a resource.
	You can also directly add the user to the IAM policy even if they are not a part of your organization(only if they  have valid member account -- member account->see above).	
	
How do I control who can create a service account in my project?
	Owner and editor roles have permissions to create service accounts in a project. If you wish to grant a user the permission to create a service account, grant them the owner or the editor role.

Can I create a service account under an organization?
	Currently you can create service accounts only under a project; you cannot create a service account directly under an organization.
	
I need to ensure that the teams in my organization cannot access each other's instances. How can I do this?
	Create two projects one for each team. Then create separate policies for each project to control which teams can access what project and the instances contained within the project. An alternative approach is to use service accounts with different roles.

If I have service account json file then I can access any services that the service account has access to ?
	A person having service account cannot use it unless he has "Service Account User" role on that service account.
	https://cloud.google.com/iam/docs/service-accounts#user-role
	 For example, if a service account has been granted the Compute Admin role (roles/compute.admin), a user that has been granted the Service Account Users role (roles/iam.serviceAccountUser) on that service account can act as the service account to start/stop/delete a Compute Engine instance.
	 Therefore, be cautious when granting the Service Account User role to a user.
	edit - i think this is not correct. dig more.



Grant roles to a Google group instead of individual users when possible. It is easier to add members to and remove members from a Google group instead of updating a Cloud IAM policy to add or remove users.

	Special case :
		You cannot grant the owner role to a member for a project using the Cloud IAM API or the gcloud command-line tool.
		You have to use cloud console and invite the member as owner.
		Plus the memeber has to accept the mail invitation. 
		This special process does not happen for any other role. 
		This process is only if you want to make member outside your orgnization as owner. For members within org, you can directly add them using gcloud/console.
	
	

Workload Identity 
	If you use Google Kubernetes Engine, then you might be running a combination of different applications on a single GKE cluster. The individual applications are likely to differ in which resources and APIs they need to access
	If you attach a service account to a GKE cluster or one of its node pools, then all pods running in cluster get access to resource permission granted by SA which might be too restrictive or too over permissive.
	Hence 
		Don't attach service accounts to GKE clusters or node pools.
		Create a "Kubernetes service account" for each Kubernetes pod that requires access to Google APIs or resources and attach it to the pod.
		Use Workload Identity to create a mapping between the service accounts and their corresponding Kubernetes service accounts.
		Now we have granular access to pods for only resources they need.
	So essentially workload identity is the mapping between normal service account and kubernetes service account.


Workload Identity Federation
	Its not related to GKE
	If you have apps running on on prem or other cloud providers like AWS then, you cannot attached gcp service account to them to talk to GCP services. But you can use them as identity provider using credentials provided these on prem or other clouds. This is called Workload Identity Federation.
	https://cloud.google.com/iam/docs/best-practices-for-using-and-managing-service-accounts#use-workload-identity-fed



While Deleting and recreating service accounts, choose new name as it may create an unexpected behaviour.


You can use Recommender to check AI based IAM recommendations google provides for fine grained security
		https://console.cloud.google.com/home/recommendations?project=project-id	


Best Practices:
	VVVIMP from ACE exam pov.
	https://cloud.google.com/iam/docs/best-practices-for-using-and-managing-service-accounts
	Don't use service accounts during development, you can use your own account (gcloud auth login) to perform tasks during developement

	Attach a service account to resource if the resource wants to access the gcp APIs.	
	e.g. compute engine, app engine

	USe Workload Identity for GKE applications

	If your applications runs on on prem or in other cloud providers, then use "Workload Identity Federation" to directly talk to google cloud services using authentication mechanism used in on prem or other cloud provider.

	Service account key is the last option to choose. If none of above option is viable in your case.
	Dont forget to rotate keys regularly.

	Never delete default service accounts such as the App Engine or Compute Engine default service account. These service accounts can't be recreated without disabling and reenabling the respective API, which might break your existing deployment. If you don't use the default service accounts, disable them instead.

	Dont use default service account, instead create single purpose SAs


VIMP : https://cloud.google.com/iam/docs/job-functions/auditing	


Gotchas
	Custom roles cannot be applied at folder level.
		gcloud iam roles create myrole --organization OR --project 
		It doesnt have --folder flag.
	Max 100 Service accounts per project
	Browser is the most restrictive role.


Pricing
	IAM is free

gcloud
	

